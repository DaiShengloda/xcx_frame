<style lang="less">
    .container {
        height: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: space-between;
        box-sizing: border-box;
    }
</style>

<script>
    import wepy from 'wepy';
    import 'wepy-async-function';
    import {
        setStore
    } from 'wepy-redux';
    import configStore from './store';
    import tips from '@/api/tips';
    import method from '@/api/motheds';
    import httpList from '@/api/httpList';
    const store = configStore();
    setStore(store);
    export default class extends wepy.app {
        config = {
            pages: [
                'pages/index/index',
            ],
            window: {
                backgroundTextStyle: 'light',
                navigationBarBackgroundColor: '#a22b00',
                navigationBarTitleText: '小程序框架',
                navigationBarTextStyle: 'white'
            }
            // tabBar: {
            //   list: [
            //     {
            //       pagePath: 'pages/index/index',
            //       text: '首页',
            //       iconPath: './static/images/icon-index2.png',
            //       selectedIconPath: './static/images/icon-index1.png'
            //     },
            //     {
            //       pagePath: 'pages/personals/personal',
            //       text: '我的',
            //       iconPath: './static/images/icon-my2.png',
            //       selectedIconPath: './static/images/icon-my1.png'
            //     }
            //   ],
            //   color: '#000',
            //   borderStyle: 'white',
            //   selectedColor: '#ff5000',
            //   backgroundColor: '#ffffff'
            // }
        };
        globalData = {
            userInfo: null
        };
        constructor() {
            super();
            this.use('requestfix');
        }
        onLaunch() {
            this.versionFn(); //版本更新
            this.testAsync();
        }
        sleep(s) {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    resolve('promise resolved');
                }, s * 1000);
            });
        }
        async testAsync() {
            const data = await this.sleep(3);
            console.log(data);
        }
        versionFn() {
            const updateManager = wx.getUpdateManager();
            console.log(updateManager);
            updateManager.onCheckForUpdate(function(res) {
                // 请求完新版本信息的回调
                console.log(res.hasUpdate);
                if (res.hasUpdate) {
                    tips.loading('正在更新');
                }
            });
            updateManager.onUpdateReady(function() {
                // 新的版本已经下载好，调用 applyUpdate 应用新版本并重启
                tips.loaded();
                updateManager.applyUpdate();
            });
            updateManager.onUpdateFailed(function() {
                // 新的版本下载失败
            });
        }
    }
</script>